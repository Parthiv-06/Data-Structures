# class Node:
#     def __init__(self,data,next=None):
#         self.data=data
#         self.next=next
# def array_to_ll(a):
#     head=Node(a[0])
#     mover=head
#     for i in range(1,len(a)):
#         temp=Node(a[i])
#         mover.next=temp
#         mover=temp
#     return head
# def print_ll(head):
#     printval=head
#     while printval is not None:
#         print(printval.data,end=" ")
#         printval=printval.next
#     return head
# def reverseLinkedList(head):
    
#     # Initialize 'temp' at the
#     # head of the linked list
#     temp = head
    
#     # Initialize 'prev' to None,
#     # representing the previous node 
#     prev = None
    
#     while temp is not None:
#         # Store the next node in 'front'
#         # to preserve the reference
#         front = temp.next
#         # Reverse the direction of the current
#         # node's 'next' pointer to point to 'prev'
#         temp.next = prev
#         # Move 'prev' to the current 
#         # node, for the next iteration
#         prev = temp
#         # Move 'temp' to 'front' node
#         # advancing traversal
#         temp = front

#     # Return the new head
#     # of the reversed linked list
#     return prev
# def getkth_node(head,k):
#     k-=1
#     temp=head
#     while temp is not None and k>0:
#         k-=1
#         temp=temp.next
#     return temp
# def reverse_kth_node(head,k):
#     temp=head
#     prevlast=None
#     while temp is not None:
#         kthNode=getkth_node(temp,k)
#         if kthNode is None:
#             if prevlast:
#                 prevlast.next=temp
#             break
#         next_node=kthNode.next
#         kthNode.next=None
#         reverseLinkedList(temp)
#         if temp==head:
#             head=kthNode
#         else:
#             prevlast.next=kthNode
#         prevlast=temp
#         temp=next_node
#     return head
# a=[1,2,3,4,5,6,7,8,9,10]
# head=array_to_ll(a)
# head=reverse_kth_node(head,3)
# print_ll(head)
    

# # class Node:
# #     def __init__(self, data, next_node=None):
# #         self.data = data
# #         self.next = next_node

# # # Function to reverse linked list
# # # using 3 pointer approach
# # def reverseLinkedList(head):
    
# #     # Initialize 'temp' at the
# #     # head of the linked list
# #     temp = head
    
# #     # Initialize 'prev' to None,
# #     # representing the previous node 
# #     prev = None
    
# #     while temp is not None:
# #         # Store the next node in 'front'
# #         # to preserve the reference
# #         front = temp.next
# #         # Reverse the direction of the current
# #         # node's 'next' pointer to point to 'prev'
# #         temp.next = prev
# #         # Move 'prev' to the current 
# #         # node, for the next iteration
# #         prev = temp
# #         # Move 'temp' to 'front' node
# #         # advancing traversal
# #         temp = front

# #     # Return the new head
# #     # of the reversed linked list
# #     return prev
    
# # # Function to get the Kth node from
# # # a given position in the linked list
# # def getKthNode(temp, k):
# #     # Decrement K as we already
# #     # start from the 1st node
# #     k -= 1

# #     # Decrement K until it reaches
# #     # the desired position
# #     while temp is not None and k > 0:
# #         # Decrement k as temp progresses
# #         k -= 1

# #         # Move to the next node
# #         temp = temp.next

# #     # Return the Kth node
# #     return temp


# # # Function to reverse nodes in groups of K
# # def kReverse(head, k):
# #     # Initialize a temporary
# #     # node to traverse the list
# #     temp = head

# #     # Initialize a pointer to track the
# #     # last node of the previous group
# #     prevLast = None

# #     # Traverse through the linked list
# #     while temp is not None:
# #         # Get the Kth node of the current group
# #         kThNode = getKthNode(temp, k)

# #         # If the Kth node is NULL
# #         # (not a complete group)
# #         if kThNode is None:
# #             # If there was a previous group,
# #             # link the last node to the current node
# #             if prevLast:
# #                 prevLast.next = temp

# #             # Exit the loop
# #             break

# #         # Store the next node
# #         # after the Kth node
# #         nextNode = kThNode.next

# #         # Disconnect the Kth node
# #         # to prepare for reversal
# #         kThNode.next = None

# #         # Reverse the nodes from
# #         # temp to the Kth node
# #         reverseLinkedList(temp)

# #         # Adjust the head if the reversal
# #         # starts from the head
# #         if temp == head:
# #             head = kThNode
# #         else:
# #             # Link the last node of the previous
# #             # group to the reversed group
# #             prevLast.next = kThNode

# #         # Update the pointer to the
# #         # last node of the previous group
# #         prevLast = temp

# #         # Move to the next group
# #         temp = nextNode

# #     # Return the head of the
# #     # modified linked list
# #     return head


# # # Function to print the linked list
# # def printLinkedList(head):
# #     temp = head
# #     while temp is not None:
# #         print(temp.data, end=" ")
# #         temp = temp.next
# #     print()


# # class Node:
# #     def __init__(self, data):
# #         self.data = data
# #         self.next = None


# # # Create a linked list with
# # # values 5, 4, 3, 7, 9 and 2
# # head = Node(5)
# # head.next = Node(4)
# # head.next.next = Node(3)
# # head.next.next.next = Node(7)
# # head.next.next.next.next = Node(9)
# # head.next.next.next.next.next = Node(2)

# # # Print the original linked list
# # print("Original Linked List: ", end="")
# # printLinkedList(head)

# # # Reverse the linked list
# # head = kReverse(head, 4)

# # # Print the reversed linked list
# # print("Reversed Linked List: ", end="")
# # printLinkedList(head)

class Node:
    def __init__(self,data,next=None):
        self.data=data
        self.next=next
def reverse_Linked_List(head):
    temp=head
    prev=None
    while temp is  not None:
        front=temp.next
        temp.next=prev
        prev=temp
        temp=front
    return prev
def kth_node(temp,k):
    k-=1
    while k>0 and temp is not None:
        k-=1
        temp=temp.next
    return temp
def kreverse(head,k):
    temp=head
    prev_node=None
    while temp is not None:
        kthnode=kth_node(temp,k)
        if kth_node is None:
            if prev_node:
                prev_node.next=temp
            break
        next_node=kthnode.next
        kthnode.next=None
        reverse_Linked_List(temp)
        if temp==head:
            head=kthnode
        else:
            prev_node.next=kth_node
        prev_node=temp
        temp=next_node
    return head
def print_ll(head):
    printval=head
    while printval is not  None:
        print(printval.data,end=" ")
        printval=printval.next
    return head
def array_to_LL(a):
    head=Node(a[0])
    mover=head
    for i in  range(1,len(a)):
        temp=Node(a[i])
        mover.next=temp
        mover=temp
    return head
a=[1,2,3,4,5,6,7,8,9,10]
head=array_to_LL(a)
head=kreverse(head,3)
print_ll(head)
